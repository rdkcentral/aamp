/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2024 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstdint>

#ifndef HELPERTESTDATA_H
#define HELPERTESTDATA_H

// Define the size of each box
constexpr uint32_t TRAF_BOX_SIZE = 8 + 8 + 12 + 20 + 20; // traf header + tfhd header + tfhd data + 2 * (trun header + trun data)
constexpr uint32_t TFHD_BOX_SIZE = 8 + 12; // tfhd header + tfhd data
constexpr uint32_t TRUN_BOX_SIZE = 8 + 12; // trun header + trun data

// Define the box types
constexpr uint32_t TRAF_TYPE = 0x74726166; // 'traf'
constexpr uint32_t TFHD_TYPE = 0x74666864; // 'tfhd'
constexpr uint32_t TRUN_TYPE = 0x7472756E; // 'trun'

// Define the static test data array
const uint8_t childBoxTestData[] = {
	// traf box
	(TRAF_BOX_SIZE >> 24) & 0xFF, (TRAF_BOX_SIZE >> 16) & 0xFF, (TRAF_BOX_SIZE >> 8) & 0xFF, TRAF_BOX_SIZE & 0xFF,
	(TRAF_TYPE >> 24) & 0xFF, (TRAF_TYPE >> 16) & 0xFF, (TRAF_TYPE >> 8) & 0xFF, TRAF_TYPE & 0xFF,

	// tfhd box
	(TFHD_BOX_SIZE >> 24) & 0xFF, (TFHD_BOX_SIZE >> 16) & 0xFF, (TFHD_BOX_SIZE >> 8) & 0xFF, TFHD_BOX_SIZE & 0xFF,
	(TFHD_TYPE >> 24) & 0xFF, (TFHD_TYPE >> 16) & 0xFF, (TFHD_TYPE >> 8) & 0xFF, TFHD_TYPE & 0xFF,
	0x00, 0x00, 0x00, 0x00, // version and flags
	0x00, 0x00, 0x00, 0x01, // track_ID

	0x00, 0x00, 0x00, 0x00,

	// first trun box
	(TRUN_BOX_SIZE >> 24) & 0xFF, (TRUN_BOX_SIZE >> 16) & 0xFF, (TRUN_BOX_SIZE >> 8) & 0xFF, TRUN_BOX_SIZE & 0xFF,
	(TRUN_TYPE >> 24) & 0xFF, (TRUN_TYPE >> 16) & 0xFF, (TRUN_TYPE >> 8) & 0xFF, TRUN_TYPE & 0xFF,
	0x00, 0x00, 0x00, 0x00, // version and flags
	0x00, 0x00, 0x00, 0x01, // sample_count

	0x00, 0x00, 0x00, 0x00,

	// second trun box
	(TRUN_BOX_SIZE >> 24) & 0xFF, (TRUN_BOX_SIZE >> 16) & 0xFF, (TRUN_BOX_SIZE >> 8) & 0xFF, TRUN_BOX_SIZE & 0xFF,
	(TRUN_TYPE >> 24) & 0xFF, (TRUN_TYPE >> 16) & 0xFF, (TRUN_TYPE >> 8) & 0xFF, TRUN_TYPE & 0xFF,
	0x00, 0x00, 0x00, 0x00, // version and flags
	0x00, 0x00, 0x00, 0x01, // sample_count

	0x00, 0x00, 0x00, 0x00
};

// Dummy timescale test data

// Define the size of each box
constexpr uint32_t MVHD_BOX_SIZE = 108; // mvhd box size
constexpr uint32_t MDHD_BOX_SIZE = 32;  // mdhd box size
constexpr uint32_t MDIA_BOX_SIZE = 8 + MDHD_BOX_SIZE; // mdia box size
constexpr uint32_t TRAK_BOX_SIZE = 8 + MDIA_BOX_SIZE; // trak box size
constexpr uint32_t MOOV_BOX_SIZE = 8 + MVHD_BOX_SIZE + TRAK_BOX_SIZE; // moov box size

// Define the box types
constexpr uint32_t MVHD_TYPE = 0x6D766864; // 'mvhd'
constexpr uint32_t MDHD_TYPE = 0x6D646864; // 'mdhd'
constexpr uint32_t MDIA_TYPE = 0x6D646961; // 'mdia'
constexpr uint32_t TRAK_TYPE = 0x7472616B; // 'trak'
constexpr uint32_t MOOV_TYPE = 0x6D6F6F76; // 'moov'

// Define the static test data array
const uint8_t setTimescaleTestData[] = {
	// moov box
	(MOOV_BOX_SIZE >> 24) & 0xFF, (MOOV_BOX_SIZE >> 16) & 0xFF, (MOOV_BOX_SIZE >> 8) & 0xFF, MOOV_BOX_SIZE & 0xFF,
	(MOOV_TYPE >> 24) & 0xFF, (MOOV_TYPE >> 16) & 0xFF, (MOOV_TYPE >> 8) & 0xFF, MOOV_TYPE & 0xFF,

	// mvhd box
	(MVHD_BOX_SIZE >> 24) & 0xFF, (MVHD_BOX_SIZE >> 16) & 0xFF, (MVHD_BOX_SIZE >> 8) & 0xFF, MVHD_BOX_SIZE & 0xFF,
	(MVHD_TYPE >> 24) & 0xFF, (MVHD_TYPE >> 16) & 0xFF, (MVHD_TYPE >> 8) & 0xFF, MVHD_TYPE & 0xFF,
	0x00, 0x00, 0x00, 0x00, // version and flags
	0x00, 0x00, 0x00, 0x00, // creation_time
	0x00, 0x00, 0x00, 0x00, // modification_time
	0x00, 0x00, 0x03, 0xE8, // timescale (1000)
	0x00, 0x00, 0x00, 0x00, // duration
	0x00, 0x01, 0x00, 0x00, // rate
	0x01, 0x00,             // volume
	0x00, 0x00,             // reserved
	0x00, 0x00, 0x00, 0x00, // reserved
	0x00, 0x00, 0x00, 0x00, // reserved
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // matrix
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // matrix
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // matrix
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // matrix
	0x40, 0x00, 0x00, 0x00, // matrix

	0x00, 0x00, 0x00, 0x00, // pre_defined
	0x00, 0x00, 0x00, 0x00, // pre_defined
	0x00, 0x00, 0x00, 0x00, // pre_defined
	0x00, 0x00, 0x00, 0x00, // pre_defined
	0x00, 0x00, 0x00, 0x00, // pre_defined
	0x00, 0x00, 0x00, 0x00, // pre_defined

	0x00, 0x00, 0x00, 0x00, // next_track_ID

	// trak box
	(TRAK_BOX_SIZE >> 24) & 0xFF, (TRAK_BOX_SIZE >> 16) & 0xFF, (TRAK_BOX_SIZE >> 8) & 0xFF, TRAK_BOX_SIZE & 0xFF,
	(TRAK_TYPE >> 24) & 0xFF, (TRAK_TYPE >> 16) & 0xFF, (TRAK_TYPE >> 8) & 0xFF, TRAK_TYPE & 0xFF,

	// mdia box
	(MDIA_BOX_SIZE >> 24) & 0xFF, (MDIA_BOX_SIZE >> 16) & 0xFF, (MDIA_BOX_SIZE >> 8) & 0xFF, MDIA_BOX_SIZE & 0xFF,
	(MDIA_TYPE >> 24) & 0xFF, (MDIA_TYPE >> 16) & 0xFF, (MDIA_TYPE >> 8) & 0xFF, MDIA_TYPE & 0xFF,

	// mdhd box
	(MDHD_BOX_SIZE >> 24) & 0xFF, (MDHD_BOX_SIZE >> 16) & 0xFF, (MDHD_BOX_SIZE >> 8) & 0xFF, MDHD_BOX_SIZE & 0xFF,
	(MDHD_TYPE >> 24) & 0xFF, (MDHD_TYPE >> 16) & 0xFF, (MDHD_TYPE >> 8) & 0xFF, MDHD_TYPE & 0xFF,
	0x00, 0x00, 0x00, 0x00, // version and flags
	0x00, 0x00, 0x00, 0x00, // creation_time
	0x00, 0x00, 0x00, 0x00, // modification_time
	0x00, 0x00, 0x03, 0xE8, // timescale (1000)
	0x00, 0x00, 0x00, 0x00, // duration
	0x55, 0xC4, 0x00, 0x00  // language and pre_defined
};

const uint8_t truncateTestStream[] = {
	// moof box
	0x00, 0x00, 0x00, 0x71, 'm', 'o', 'o', 'f', // size (113 bytes), type 'moof'
	// traf box
	0x00, 0x00, 0x00, 0x69, 't', 'r', 'a', 'f', // size (105 bytes), type 'traf'
	// tfhd box
	0x00, 0x00, 0x00, 0x1C, 't', 'f', 'h', 'd', // size (28 bytes), type 'tfhd'
	0x00, 0x00, 0x00, 0x02,						// version and flags
	0x00, 0x00, 0x00, 0x01,						// track_ID
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 					// base_data_offset
	0x00, 0x00, 0x00, 0x00,						// sample_description_index
	// 0x00, 0x00, 0x00, 0x00,						// default_sample_duration
	// 0x00, 0x00, 0x00, 0x00,						// default_sample_size
	// 0x00, 0x00, 0x00, 0x00,						// default_sample_flags
	// saiz box
	0x00, 0x00, 0x00, 0x15, 's', 'a', 'i', 'z', // size (21 bytes), type 'saiz'
	0x00, 0x00, 0x00, 0x00,						// version and flags
	0x02, 										// default_sample_info_size
	0x00, 0x00, 0x00, 0x02,						// sample_count (2 samples)
	0x00, 0x10, 0x00, 0x10,						// sample_size (16 bytes each)
	// trun box 1
	0x00, 0x00, 0x00, 0x18, 't', 'r', 'u', 'n', // size (24 bytes), type 'trun'
	0x00, 0x00, 0x01, 0x00,						// version and flags
	0x00, 0x00, 0x00, 0x02,						// sample_count (2 samples)
	0x00, 0x00, 0x00, 0x10,						// sample_duration (4 bytes each)
	0x00, 0x00, 0x00, 0x10,						// sample_duration (4 bytes each)
	// trun box 2
	0x00, 0x00, 0x00, 0x18, 't', 'r', 'u', 'n', // size (24 bytes), type 'trun'
	0x00, 0x00, 0x01, 0x00,						// version and flags
	0x00, 0x00, 0x00, 0x02,						// sample_count (2 samples)
	0x00, 0x00, 0x00, 0x10,						// sample_duration (4 bytes each)
	0x00, 0x00, 0x00, 0x10,						// sample_duration (4 bytes each)
	// mdat box
	0x00, 0x00, 0x02, 0x00, 'm', 'd', 'a', 't', // size (512 bytes), type 'mdat'
	// 512 bytes of media data (dummy data)
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#endif // HELPERTESTDATA_H
