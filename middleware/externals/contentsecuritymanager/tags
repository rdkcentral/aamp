!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/deepika/to_do/aamp/middleware/externals/contentsecuritymanager/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
AcquireLicense	ContentSecurityManager.cpp	/^bool ContentSecurityManager::AcquireLicense(std::string clientId, std::string appId, const char*/;"	f	class:ContentSecurityManager	typeref:typename:bool
AcquireLicense	ContentSecurityManager.h	/^        bool AcquireLicense( std::string clientId, std::string appId, const char* licenseUrl, co/;"	f	class:FakeSecManager	typeref:typename:bool
AcquireLicenseOpenOrUpdate	ContentSecurityManager.h	/^	virtual bool AcquireLicenseOpenOrUpdate( std::string clientId, std::string appId, const char* l/;"	f	class:ContentSecurityManager	typeref:typename:bool
AcquireLicenseOpenOrUpdate	IFirebolt/ContentProtectionFirebolt.cpp	/^bool ContentProtectionFirebolt::AcquireLicenseOpenOrUpdate( std::string clientId, std::string ap/;"	f	class:ContentProtectionFirebolt	typeref:typename:bool
AcquireLicenseOpenOrUpdate	SecManagerThunder.cpp	/^bool SecManagerThunder::AcquireLicenseOpenOrUpdate( std::string clientId, std::string appId, con/;"	f	class:SecManagerThunder	typeref:typename:bool
ActivatePlugin	ThunderAccessPlayer.cpp	/^bool ThunderAccessPlayer::ActivatePlugin()$/;"	f	class:ThunderAccessPlayer	typeref:typename:bool
AlwaysShowWatermarkOnTop	SecManagerThunder.cpp	/^void SecManagerThunder::AlwaysShowWatermarkOnTop(bool show)$/;"	f	class:SecManagerThunder	typeref:typename:void
CONTENT_PROTECTION_FIREBOLT_H	IFirebolt/ContentProtectionFirebolt.h	/^#define CONTENT_PROTECTION_FIREBOLT_H$/;"	d
CONTENT_SECURITY_MANAGER_ACCTOKEN_EXPIRED	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_ACCTOKEN_EXPIRED /;"	d
CONTENT_SECURITY_MANAGER_CLASS_RESULT_API_FAIL	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_CLASS_RESULT_API_FAIL = 100,$/;"	e	enum:__anona789faf40103
CONTENT_SECURITY_MANAGER_CLASS_RESULT_DRM_FAIL	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_CLASS_RESULT_DRM_FAIL = 200,$/;"	e	enum:__anona789faf40103
CONTENT_SECURITY_MANAGER_CLASS_RESULT_SECCLIENT_FAIL	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_CLASS_RESULT_SECCLIENT_FAIL = 400,$/;"	e	enum:__anona789faf40103
CONTENT_SECURITY_MANAGER_CLASS_RESULT_SUCCESS	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_CLASS_RESULT_SUCCESS = 0,$/;"	e	enum:__anona789faf40103
CONTENT_SECURITY_MANAGER_CLASS_RESULT_UNDEFINED	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_CLASS_RESULT_UNDEFINED = 9999$/;"	e	enum:__anona789faf40103
CONTENT_SECURITY_MANAGER_CLASS_RESULT_WATERMARK_FAIL	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_CLASS_RESULT_WATERMARK_FAIL = 300,$/;"	e	enum:__anona789faf40103
CONTENT_SECURITY_MANAGER_DRM_FAILURE	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_DRM_FAILURE /;"	d
CONTENT_SECURITY_MANAGER_DRM_GEN_FAILURE	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_DRM_GEN_FAILURE /;"	d
CONTENT_SECURITY_MANAGER_ENTITLEMENT_FAILURE	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_ENTITLEMENT_FAILURE /;"	d
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_ACCESS_ATTRIBUTE	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_ACCESS_ATTRIBUTE = 8,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_ACCESS_TOKEN	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_ACCESS_TOKEN = 7,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_APPLICATION_ID	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_APPLICATION_ID = 10,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_ASPECT_DIMENSION	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_ASPECT_DIMENSION = 2,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_CLIENT_ID	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_CLIENT_ID = 12,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_CONTENT_METADATA	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_CONTENT_METADATA = 5,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_CONTENT_PARAMETER	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_CONTENT_PARAMETER = 15,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_DRM_LICENSE_PARAM	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_DRM_LICENSE_PARAM = 4,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_EVENT_ID	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_EVENT_ID = 11,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_KEY_SYSTEM_PARAM	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_KEY_SYSTEM_PARAM = 3,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_MEDIA_USAGE	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_MEDIA_USAGE = 6,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_PERCEPTION_ID	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_PERCEPTION_ID = 13,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_SESSION_CONFIG	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_SESSION_CONFIG = 1,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_SESSION_ID	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_SESSION_ID = 9,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_INVALID_WATERMARK_PARAMETER	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_INVALID_WATERMARK_PARAMETER = 14,$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_API_UNDEFINED_ERROR	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_API_UNDEFINED_ERROR = 9999$/;"	e	enum:__anona789faf40403
CONTENT_SECURITY_MANAGER_REASON_DRM_ACCESS_TOKEN_ERROR	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_ACCESS_TOKEN_ERROR = 6,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_ACCESS_TOKEN_EXPIRED	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_ACCESS_TOKEN_EXPIRED = 8,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_ACCESS_TOKEN_IP_DIFF	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_ACCESS_TOKEN_IP_DIFF = 7,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_AUTHENTICATION_FAIL	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_AUTHENTICATION_FAIL = 103$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_DEVICE_TOKEN_EXPIRED	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_DEVICE_TOKEN_EXPIRED = 9,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_ENTITLEMENT_ERROR	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_ENTITLEMENT_ERROR = 102,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_GENERAL_FAILURE	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_GENERAL_FAILURE = 1,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_LICENSE_BUSY	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_LICENSE_BUSY = 5,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_LICENSE_NETWORK_FAIL	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_LICENSE_NETWORK_FAIL = 4,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_LICENSE_TIMEOUT	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_LICENSE_TIMEOUT = 3,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_MAC_TOKEN_MISSING	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_MAC_TOKEN_MISSING = 10,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_MAC_TOKEN_NO_PROV	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_MAC_TOKEN_NO_PROV = 11,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_MEMORY_ALLOCATION_ERROR	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_MEMORY_ALLOCATION_ERROR = 12,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_NO_PLAYBACK_SESSION	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_NO_PLAYBACK_SESSION = 2,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_PERMISSION_DENIED	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_PERMISSION_DENIED = 100,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_RULE_ERROR	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_RULE_ERROR = 101,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_REASON_DRM_SECAPI_USAGE_FAILURE	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_REASON_DRM_SECAPI_USAGE_FAILURE = 13,$/;"	e	enum:__anona789faf40303
CONTENT_SECURITY_MANAGER_SERVICE_BUSY	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_SERVICE_BUSY /;"	d
CONTENT_SECURITY_MANAGER_SERVICE_CON_FAILURE	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_SERVICE_CON_FAILURE /;"	d
CONTENT_SECURITY_MANAGER_SERVICE_TIMEOUT	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_SERVICE_TIMEOUT /;"	d
CONTENT_SECURITY_MANAGER_SUCCESS	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_SUCCESS = 0,$/;"	e	enum:__anona789faf40203
CONTENT_SECURITY_MANAGER_SUCCESS_WATERMARK_NOT_REQUIRED	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_SUCCESS_WATERMARK_NOT_REQUIRED = 101$/;"	e	enum:__anona789faf40203
CONTENT_SECURITY_MANAGER_SUCCESS_WATERMARK_SESSION_ENGAGED	PlayerSecInterface.h	/^	CONTENT_SECURITY_MANAGER_SUCCESS_WATERMARK_SESSION_ENGAGED = 100,$/;"	e	enum:__anona789faf40203
CONTENT_SECURITY_MANAGER_WM_FAILURE	ContentSecurityManager.h	/^#define CONTENT_SECURITY_MANAGER_WM_FAILURE /;"	d
CONTENT_SECURITY_MGR_INVALID_SESSION_ID	ContentSecurityManagerSession.h	/^#define CONTENT_SECURITY_MGR_INVALID_SESSION_ID /;"	d
CloseDrmSession	ContentSecurityManager.h	/^	virtual void CloseDrmSession(int64_t sessionId) {}$/;"	f	class:ContentSecurityManager	typeref:typename:void
CloseDrmSession	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::CloseDrmSession(int64_t sessionId)$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
CloseDrmSession	SecManagerThunder.cpp	/^void SecManagerThunder::CloseDrmSession(int64_t sessionId)$/;"	f	class:SecManagerThunder	typeref:typename:void
ConnectionChanged	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::ConnectionChanged(const bool connected, int error)$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
ContentProtectionFirebolt	IFirebolt/ContentProtectionFirebolt.cpp	/^ContentProtectionFirebolt::ContentProtectionFirebolt() : mInitialized(false), mIsConnected(false/;"	f	class:ContentProtectionFirebolt
ContentProtectionFirebolt	IFirebolt/ContentProtectionFirebolt.h	/^class ContentProtectionFirebolt : public ContentSecurityManager$/;"	c
ContentSecurityManager	ContentSecurityManager.h	/^	ContentSecurityManager(){};$/;"	f	class:ContentSecurityManager
ContentSecurityManager	ContentSecurityManager.h	/^class ContentSecurityManager : public PlayerScheduler$/;"	c
ContentSecurityManagerResultApiCode	PlayerSecInterface.h	/^} ContentSecurityManagerResultApiCode;$/;"	t	typeref:enum:__anona789faf40403
ContentSecurityManagerResultClassStatusCode	PlayerSecInterface.h	/^} ContentSecurityManagerResultClassStatusCode;$/;"	t	typeref:enum:__anona789faf40103
ContentSecurityManagerResultDRMCode	PlayerSecInterface.h	/^} ContentSecurityManagerResultDRMCode;$/;"	t	typeref:enum:__anona789faf40303
ContentSecurityManagerResultSuccessCode	PlayerSecInterface.h	/^} ContentSecurityManagerResultSuccessCode;$/;"	t	typeref:enum:__anona789faf40203
ContentSecurityManagerSession	ContentSecurityManagerSession.cpp	/^ContentSecurityManagerSession::ContentSecurityManagerSession(int64_t sessionID, std::size_t inpu/;"	f	class:ContentSecurityManagerSession
ContentSecurityManagerSession	ContentSecurityManagerSession.h	/^	ContentSecurityManagerSession(): mpSessionManager(), sessionIdMutex() {};$/;"	f	class:ContentSecurityManagerSession
ContentSecurityManagerSession	ContentSecurityManagerSession.h	/^	ContentSecurityManagerSession(const ContentSecurityManagerSession& other): mpSessionManager(), /;"	f	class:ContentSecurityManagerSession
ContentSecurityManagerSession	ContentSecurityManagerSession.h	/^class ContentSecurityManagerSession$/;"	c
CreateFireboltInstance	IFirebolt/ContentProtectionFirebolt.cpp	/^bool ContentProtectionFirebolt::CreateFireboltInstance(const std::string &url)$/;"	f	class:ContentProtectionFirebolt	typeref:typename:bool
CreateWatermark	SecManagerThunder.cpp	/^void SecManagerThunder::CreateWatermark(int graphicId, int zIndex )$/;"	f	class:SecManagerThunder	typeref:typename:void
DeInitialize	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::DeInitialize()$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
DeleteWatermark	SecManagerThunder.cpp	/^void SecManagerThunder::DeleteWatermark(int graphicId)$/;"	f	class:SecManagerThunder	typeref:typename:void
DestroyFireboltInstance	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::DestroyFireboltInstance()$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
DestroyInstance	ContentSecurityManager.cpp	/^void ContentSecurityManager::DestroyInstance()$/;"	f	class:ContentSecurityManager	typeref:typename:void
FakeSecManager	ContentSecurityManager.h	/^class FakeSecManager : public ContentSecurityManager $/;"	c
GetInstance	ContentSecurityManager.cpp	/^ContentSecurityManager* ContentSecurityManager::GetInstance()$/;"	f	class:ContentSecurityManager	typeref:typename:ContentSecurityManager *
GetWaterMarkPalette	SecManagerThunder.cpp	/^void SecManagerThunder::GetWaterMarkPalette(int sessionId, int graphicId)$/;"	f	class:SecManagerThunder	typeref:typename:void
HandleWatermarkEvent	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::HandleWatermarkEvent(const std::string& sessionId, const std::st/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
Initialize	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::Initialize()$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
Instance	ContentSecurityManager.cpp	/^static ContentSecurityManager *Instance = nullptr; \/**< singleton instance*\/$/;"	v	typeref:typename:ContentSecurityManager *	file:
InstanceMutex	ContentSecurityManager.cpp	/^static std::mutex InstanceMutex;$/;"	v	typeref:typename:std::mutex	file:
InvokeJSONRPC	ThunderAccessPlayer.cpp	/^bool ThunderAccessPlayer::InvokeJSONRPC(std::string method, const JsonObject &param, JsonObject /;"	f	class:ThunderAccessPlayer	typeref:typename:bool
IsActive	IFirebolt/ContentProtectionFirebolt.cpp	/^bool ContentProtectionFirebolt::IsActive(bool \/*force*\/)$/;"	f	class:ContentProtectionFirebolt	typeref:typename:bool
MAX_LENGTH	ThunderAccessPlayer.cpp	/^#define MAX_LENGTH /;"	d	file:
MAX_LICENSE_REQUEST_ATTEMPTS	ContentSecurityManager.h	/^#define MAX_LICENSE_REQUEST_ATTEMPTS /;"	d
MapFireboltStatus	IFirebolt/ContentProtectionFirebolt.cpp	/^static int MapFireboltStatus(const std::string& statusStr) {$/;"	f	typeref:typename:int	file:
ModifyWatermarkPalette	SecManagerThunder.cpp	/^void SecManagerThunder::ModifyWatermarkPalette(int graphicId, int clutKey, int imageKey)$/;"	f	class:SecManagerThunder	typeref:typename:void
OpenDrmSession	IFirebolt/ContentProtectionFirebolt.cpp	/^bool ContentProtectionFirebolt::OpenDrmSession(std::string& clientId, std::string appId, std::st/;"	f	class:ContentProtectionFirebolt	typeref:typename:bool
PLAYER_SEC_INTERFACE_H	PlayerSecInterface.h	/^#define PLAYER_SEC_INTERFACE_H$/;"	d
PlayerSecExtendedStatus	PlayerSecInterface.h	/^struct PlayerSecExtendedStatus$/;"	s
PlayerSecInterface	PlayerSecInterface.h	/^class PlayerSecInterface $/;"	c
PlayerSec_AcquireLicense	PlayerSecInterface.cpp	/^int32_t PlayerSecInterface::PlayerSec_AcquireLicense(const char *serviceHostUrl, uint8_t numberO/;"	f	class:PlayerSecInterface	typeref:typename:int32_t
PlayerSec_FreeResource	PlayerSecInterface.cpp	/^int32_t PlayerSecInterface::PlayerSec_FreeResource(const char *resource)$/;"	f	class:PlayerSecInterface	typeref:typename:int32_t
RegisterAllEvents	SecManagerThunder.cpp	/^void SecManagerThunder::RegisterAllEvents ()$/;"	f	class:SecManagerThunder	typeref:typename:void
ReleaseSession	ContentSecurityManager.cpp	/^void ContentSecurityManager::ReleaseSession(int64_t sessionId)$/;"	f	class:ContentSecurityManager	typeref:typename:void
ReleaseSession	ContentSecurityManager.h	/^        void ReleaseSession(int64_t sessionId) override$/;"	f	class:FakeSecManager	typeref:typename:void
SAFE_DELETE	ThunderAccessPlayer.cpp	/^#define SAFE_DELETE(/;"	d	file:
SECMANAGER_CALL_SIGN	ContentSecurityManager.cpp	/^#define SECMANAGER_CALL_SIGN /;"	d	file:
SECMANAGER_CALL_SIGN	SecManagerThunder.h	/^#define SECMANAGER_CALL_SIGN /;"	d
SERVER_DETAILS	ThunderAccessPlayer.cpp	/^#define SERVER_DETAILS /;"	d	file:
SHMGET_RETRY_MAX	PlayerMemoryUtils.h	/^#define SHMGET_RETRY_MAX /;"	d
SHM_ACCESS_PERMISSION	PlayerMemoryUtils.h	/^#define SHM_ACCESS_PERMISSION /;"	d
SecManagerThunder	SecManagerThunder.cpp	/^SecManagerThunder::SecManagerThunder() : mSecManagerObj(SECMANAGER_CALL_SIGN), mSecMutex(), mSch/;"	f	class:SecManagerThunder
SecManagerThunder	SecManagerThunder.h	/^class SecManagerThunder : public ContentSecurityManager$/;"	c
SendWatermarkSessionEvent_CB	ContentSecurityManager.cpp	/^std::function<void(uint32_t, uint32_t, const std::string&)> ContentSecurityManager::SendWatermar/;"	m	class:ContentSecurityManager	typeref:typename:std::function<void (uint32_t,uint32_t,const std::string &)>
SendWatermarkSessionEvent_CB	ContentSecurityManager.h	/^	static std::function<void(uint32_t, uint32_t, const std::string&)> SendWatermarkSessionEvent_CB/;"	m	class:ContentSecurityManager	typeref:typename:std::function<void (uint32_t,uint32_t,const std::string &)>
SessionManager	ContentSecurityManagerSession.cpp	/^ContentSecurityManagerSession::SessionManager::SessionManager(int64_t sessionID, std::size_t inp/;"	f	class:ContentSecurityManagerSession::SessionManager
SessionManager	ContentSecurityManagerSession.h	/^	class SessionManager$/;"	c	class:ContentSecurityManagerSession
SetDrmSessionState	ContentSecurityManager.h	/^    	virtual bool SetDrmSessionState(int64_t sessionId, bool active) { return false; }$/;"	f	class:ContentSecurityManager	typeref:typename:bool
SetDrmSessionState	IFirebolt/ContentProtectionFirebolt.cpp	/^bool ContentProtectionFirebolt::SetDrmSessionState(int64_t sessionId, bool active)$/;"	f	class:ContentProtectionFirebolt	typeref:typename:bool
SetDrmSessionState	SecManagerThunder.cpp	/^bool SecManagerThunder::SetDrmSessionState(int64_t sessionId, bool active)$/;"	f	class:SecManagerThunder	typeref:typename:bool
SetPlaybackPosition	ContentSecurityManager.h	/^	virtual bool SetPlaybackPosition(int64_t sessionId, float speed, int32_t position) { return fal/;"	f	class:ContentSecurityManager	typeref:typename:bool
SetPlaybackPosition	IFirebolt/ContentProtectionFirebolt.cpp	/^bool ContentProtectionFirebolt::SetPlaybackPosition(int64_t sessionId, float speed, int32_t posi/;"	f	class:ContentProtectionFirebolt	typeref:typename:bool
SetPlaybackPosition	SecManagerThunder.cpp	/^bool SecManagerThunder::SetPlaybackPosition(int64_t sessionId, float playback_speed, int32_t pla/;"	f	class:SecManagerThunder	typeref:typename:bool
ShowWatermark	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::ShowWatermark(bool show, int64_t sessionId)$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
ShowWatermark	SecManagerThunder.cpp	/^void SecManagerThunder::ShowWatermark(bool show)$/;"	f	class:SecManagerThunder	typeref:typename:void
SubscribeEvent	ThunderAccessPlayer.cpp	/^bool ThunderAccessPlayer::SubscribeEvent (string eventName, std::function<void(const WPEFramewor/;"	f	class:ThunderAccessPlayer	typeref:typename:bool
SubscribeEvents	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::SubscribeEvents()$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
THUNDERACCESSPLAYER_H_	ThunderAccessPlayer.h	/^#define THUNDERACCESSPLAYER_H_$/;"	d
THUNDER_RPC_TIMEOUT	ThunderAccessPlayer.h	/^#define THUNDER_RPC_TIMEOUT /;"	d
ThunderAccessPlayer	ThunderAccessPlayer.cpp	/^ThunderAccessPlayer::ThunderAccessPlayer(std::string callsign)$/;"	f	class:ThunderAccessPlayer
ThunderAccessPlayer	ThunderAccessPlayer.h	/^class ThunderAccessPlayer$/;"	c
ThunderSecurityPlayer	ThunderAccessPlayer.cpp	/^    ThunderSecurityPlayer(): securityToken(), tokenStatus(0), tokenQueried(false) { };$/;"	f	struct:ThunderSecurityPlayer	file:
ThunderSecurityPlayer	ThunderAccessPlayer.cpp	/^typedef struct ThunderSecurityPlayer$/;"	s	file:
ThunderSecurityPlayerData	ThunderAccessPlayer.cpp	/^}ThunderSecurityPlayerData;$/;"	t	typeref:struct:ThunderSecurityPlayer	file:
ToString	ContentSecurityManagerSession.h	/^	std::string ToString()$/;"	f	class:ContentSecurityManagerSession	typeref:typename:std::string
UnRegisterAllEvents	SecManagerThunder.cpp	/^void SecManagerThunder::UnRegisterAllEvents ()$/;"	f	class:SecManagerThunder	typeref:typename:void
UnSubscribeEvent	ThunderAccessPlayer.cpp	/^bool ThunderAccessPlayer::UnSubscribeEvent (std::string eventName)$/;"	f	class:ThunderAccessPlayer	typeref:typename:bool
UnSubscribeEvents	IFirebolt/ContentProtectionFirebolt.cpp	/^void ContentProtectionFirebolt::UnSubscribeEvents()$/;"	f	class:ContentProtectionFirebolt	typeref:typename:void
UpdateDrmSession	IFirebolt/ContentProtectionFirebolt.cpp	/^bool ContentProtectionFirebolt::UpdateDrmSession(int64_t sessionId, std::string licenseRequest, /;"	f	class:ContentProtectionFirebolt	typeref:typename:bool
UpdateSessionState	ContentSecurityManager.cpp	/^bool ContentSecurityManager::UpdateSessionState(int64_t sessionId, bool active)$/;"	f	class:ContentSecurityManager	typeref:typename:bool
UpdateSessionState	ContentSecurityManager.h	/^	bool UpdateSessionState(int64_t sessionId, bool active) override$/;"	f	class:FakeSecManager	typeref:typename:bool
UpdateWatermark	SecManagerThunder.cpp	/^void SecManagerThunder::UpdateWatermark(int graphicId, int smKey, int smSize )$/;"	f	class:SecManagerThunder	typeref:typename:void
UseFireboltSDK	ContentSecurityManager.cpp	/^void ContentSecurityManager::UseFireboltSDK(bool status)$/;"	f	class:ContentSecurityManager	typeref:typename:void
WATERMARK_PLUGIN_CALLSIGN	ContentSecurityManager.cpp	/^#define WATERMARK_PLUGIN_CALLSIGN /;"	d	file:
WATERMARK_PLUGIN_CALLSIGN	SecManagerThunder.h	/^#define WATERMARK_PLUGIN_CALLSIGN /;"	d
__CONTENT_SECURITY_MANAGER_H__	ContentSecurityManager.h	/^#define __CONTENT_SECURITY_MANAGER_H__$/;"	d
__CONTENT_SECURITY_MANAGER_SESSION_H__	ContentSecurityManagerSession.h	/^#define __CONTENT_SECURITY_MANAGER_SESSION_H__$/;"	d
__PLAYER_MEMORY_UTILS_H__	PlayerMemoryUtils.h	/^#define __PLAYER_MEMORY_UTILS_H__$/;"	d
__SECMANAGER_THUNDER_H__	SecManagerThunder.h	/^#define __SECMANAGER_THUNDER_H__$/;"	d
__anon15d228060102	SecManagerThunder.cpp	/^					{$/;"	f	function:SecManagerThunder::addWatermarkHandler	file:
__anon15d228060202	SecManagerThunder.cpp	/^					{$/;"	f	function:SecManagerThunder::addWatermarkHandler	file:
__anon15d228060302	SecManagerThunder.cpp	/^						{$/;"	f	function:SecManagerThunder::addWatermarkHandler	file:
__anon15d228060402	SecManagerThunder.cpp	/^					{$/;"	f	function:SecManagerThunder::updateWatermarkHandler	file:
__anon15d228060502	SecManagerThunder.cpp	/^					{$/;"	f	function:SecManagerThunder::removeWatermarkHandler	file:
__anon15d228060602	SecManagerThunder.cpp	/^					{$/;"	f	function:SecManagerThunder::showWatermarkHandler	file:
__anon6cde455e0102	IFirebolt/ContentProtectionFirebolt.cpp	/^			{$/;"	f	function:ContentProtectionFirebolt::SubscribeEvents	file:
__anon6cde455e0202	IFirebolt/ContentProtectionFirebolt.cpp	/^	if (!mConnectionCV.wait_for(mLock, std::chrono::milliseconds(500), [this] { return mIsConnected/;"	f	function:ContentProtectionFirebolt::Initialize	file:
__anon6cde455e0302	IFirebolt/ContentProtectionFirebolt.cpp	/^	auto callback = [this](bool connected, Firebolt::Error error) {$/;"	f	function:ContentProtectionFirebolt::CreateFireboltInstance	file:
__anona789faf40103	PlayerSecInterface.h	/^typedef enum {$/;"	g
__anona789faf40203	PlayerSecInterface.h	/^typedef enum {$/;"	g
__anona789faf40303	PlayerSecInterface.h	/^typedef enum {$/;"	g
__anona789faf40403	PlayerSecInterface.h	/^typedef enum {$/;"	g
accessAttributeStatus	PlayerSecInterface.h	/^	int accessAttributeStatus;$/;"	m	struct:PlayerSecExtendedStatus	typeref:typename:int
addWatermarkHandler	SecManagerThunder.cpp	/^void SecManagerThunder::addWatermarkHandler(const JsonObject& parameters)$/;"	f	class:SecManagerThunder	typeref:typename:void
controllerObject	ThunderAccessPlayer.h	/^    JSONRPC::LinkType<Core::JSON::IElement> *controllerObject;$/;"	m	class:ThunderAccessPlayer	typeref:typename:JSONRPC::LinkType<Core::JSON::IElement> *
convertStringToKeySystem	IFirebolt/ContentProtectionFirebolt.cpp	/^static Firebolt::ContentProtection::KeySystem convertStringToKeySystem(const std::string& keySys/;"	f	typeref:typename:Firebolt::ContentProtection::KeySystem	file:
gSecurityPlayerData	ThunderAccessPlayer.cpp	/^ThunderSecurityPlayerData gSecurityPlayerData;$/;"	v	typeref:typename:ThunderSecurityPlayerData
getAsVerboseErrorCode	PlayerSecInterface.cpp	/^bool getAsVerboseErrorCode(int32_t httpCode, int32_t &secManagerClass, int32_t &secManagerReason/;"	f	typeref:typename:bool
getID	ContentSecurityManagerSession.h	/^		int64_t getID(){return mID;}$/;"	f	class:ContentSecurityManagerSession::SessionManager	typeref:typename:int64_t
getInputSummaryHash	ContentSecurityManager.cpp	/^std::size_t ContentSecurityManager::getInputSummaryHash(const char* moneyTraceMetadata[][2], con/;"	f	class:ContentSecurityManager	typeref:typename:std::size_t
getInputSummaryHash	ContentSecurityManagerSession.cpp	/^std::size_t ContentSecurityManagerSession::getInputSummaryHash()$/;"	f	class:ContentSecurityManagerSession	typeref:typename:std::size_t
getInputSummaryHash	ContentSecurityManagerSession.h	/^		std::size_t getInputSummaryHash(){return mInputSummaryHash.load();}$/;"	f	class:ContentSecurityManagerSession::SessionManager	typeref:typename:std::size_t
getInstance	ContentSecurityManagerSession.cpp	/^std::shared_ptr<ContentSecurityManagerSession::SessionManager> ContentSecurityManagerSession::Se/;"	f	class:ContentSecurityManagerSession::SessionManager	typeref:typename:std::shared_ptr<ContentSecurityManagerSession::SessionManager>
getSchedulerStatus	SecManagerThunder.cpp	/^bool SecManagerThunder::getSchedulerStatus ()$/;"	f	class:SecManagerThunder	typeref:typename:bool
getSessionID	ContentSecurityManagerSession.cpp	/^int64_t ContentSecurityManagerSession::getSessionID(void) const$/;"	f	class:ContentSecurityManagerSession	typeref:typename:int64_t
getWatermarkSessionEvent_CB	ContentSecurityManager.cpp	/^std::function<void(uint32_t, uint32_t, const std::string&)>& ContentSecurityManager::getWatermar/;"	f	class:ContentSecurityManager	typeref:typename:std::function<void (uint32_t,uint32_t,const std::string &)> &
isSecFeatureEnabled	PlayerSecInterface.cpp	/^bool isSecFeatureEnabled()$/;"	f	typeref:typename:bool
isSecManagerEnabled	PlayerSecInterface.cpp	/^bool isSecManagerEnabled()$/;"	f	typeref:typename:bool
isSecRequestFailed	PlayerSecInterface.cpp	/^bool PlayerSecInterface::isSecRequestFailed(int32_t requestResult)$/;"	f	class:PlayerSecInterface	typeref:typename:bool
isSecResultInRange	PlayerSecInterface.cpp	/^bool PlayerSecInterface::isSecResultInRange(int32_t requestResult)$/;"	f	class:PlayerSecInterface	typeref:typename:bool
isSessionValid	ContentSecurityManagerSession.h	/^	bool isSessionValid(void) const$/;"	f	class:ContentSecurityManagerSession	typeref:typename:bool
loadClutWatermark	SecManagerThunder.cpp	/^bool SecManagerThunder::loadClutWatermark(int64_t sessionId, int64_t graphicId, int64_t watermar/;"	f	class:SecManagerThunder	typeref:typename:bool
mConnectionCV	IFirebolt/ContentProtectionFirebolt.cpp	/^std::condition_variable mConnectionCV;$/;"	v	typeref:typename:std::condition_variable
mConnectionMutex	IFirebolt/ContentProtectionFirebolt.cpp	/^std::mutex mConnectionMutex;$/;"	v	typeref:typename:std::mutex
mContentProtectionMutex	IFirebolt/ContentProtectionFirebolt.h	/^	std::mutex mContentProtectionMutex;$/;"	m	class:ContentProtectionFirebolt	typeref:typename:std::mutex
mFireboltInitMutex	IFirebolt/ContentProtectionFirebolt.h	/^	std::mutex mFireboltInitMutex;$/;"	m	class:ContentProtectionFirebolt	typeref:typename:std::mutex
mID	ContentSecurityManagerSession.h	/^		int64_t mID;	\/\/set once undermutex in constructor$/;"	m	class:ContentSecurityManagerSession::SessionManager	typeref:typename:int64_t
mInitialized	IFirebolt/ContentProtectionFirebolt.h	/^	bool mInitialized;$/;"	m	class:ContentProtectionFirebolt	typeref:typename:bool
mInputSummaryHash	ContentSecurityManagerSession.h	/^		std::atomic<std::size_t> mInputSummaryHash;	\/\/can be changed by setInputSummaryHash$/;"	m	class:ContentSecurityManagerSession::SessionManager	typeref:typename:std::atomic<std::size_t>
mIsConnected	IFirebolt/ContentProtectionFirebolt.h	/^	bool mIsConnected;$/;"	m	class:ContentProtectionFirebolt	typeref:typename:bool
mListenerId	IFirebolt/ContentProtectionFirebolt.h	/^	unsigned mListenerId;$/;"	m	class:ContentProtectionFirebolt	typeref:typename:unsigned
mRegisteredEvents	SecManagerThunder.h	/^	std::list<std::string> mRegisteredEvents;$/;"	m	class:SecManagerThunder	typeref:typename:std::list<std::string>
mSchedulerStarted	SecManagerThunder.h	/^	bool mSchedulerStarted;$/;"	m	class:SecManagerThunder	typeref:typename:bool
mSecManagerObj	SecManagerThunder.h	/^	ThunderAccessPlayer mSecManagerObj;       \/**< ThunderAccessPlayer object for communicating wi/;"	m	class:SecManagerThunder	typeref:typename:ThunderAccessPlayer
mSecMutex	SecManagerThunder.h	/^	std::mutex mSecMutex;    	        \/**< Lock for accessing mSecManagerObj*\/$/;"	m	class:SecManagerThunder	typeref:typename:std::mutex
mSpeedStateMutex	IFirebolt/ContentProtectionFirebolt.h	/^	std::mutex mSpeedStateMutex;$/;"	m	class:ContentProtectionFirebolt	typeref:typename:std::mutex
mSpeedStateMutex	SecManagerThunder.h	/^	std::mutex mSpeedStateMutex;		\/**< mutex for setPlaybackSpeedState()*\/$/;"	m	class:SecManagerThunder	typeref:typename:std::mutex
mSubscriptionId	IFirebolt/ContentProtectionFirebolt.cpp	/^uint64_t ContentProtectionFirebolt::mSubscriptionId = 0; $/;"	m	class:ContentProtectionFirebolt	typeref:typename:uint64_t
mSubscriptionId	IFirebolt/ContentProtectionFirebolt.h	/^	static uint64_t mSubscriptionId;$/;"	m	class:ContentProtectionFirebolt	typeref:typename:uint64_t
mUseFireboltSDK	ContentSecurityManager.cpp	/^static bool mUseFireboltSDK = false;$/;"	v	typeref:typename:bool	file:
mWatMutex	SecManagerThunder.h	/^	std::mutex mWatMutex;		        \/**< Lock for accessing mWatermarkPluginObj*\/$/;"	m	class:SecManagerThunder	typeref:typename:std::mutex
mWatermarkPluginObj	SecManagerThunder.h	/^	ThunderAccessPlayer mWatermarkPluginObj;  \/**< ThunderAccessPlayer object for communicating wi/;"	m	class:SecManagerThunder	typeref:typename:ThunderAccessPlayer
mpSessionManager	ContentSecurityManagerSession.h	/^	std::shared_ptr<ContentSecurityManagerSession::SessionManager> mpSessionManager;$/;"	m	class:ContentSecurityManagerSession	typeref:typename:std::shared_ptr<ContentSecurityManagerSession::SessionManager>
operator =	ContentSecurityManagerSession.h	/^	ContentSecurityManagerSession& operator=(const ContentSecurityManagerSession& other)$/;"	f	class:ContentSecurityManagerSession	typeref:typename:ContentSecurityManagerSession &
player_CleanUpSharedMem	PlayerMemoryUtils.cpp	/^void player_CleanUpSharedMem(void* shmPointer, key_t shmKey, size_t shmLen)$/;"	f	typeref:typename:void
player_CreateSharedMem	PlayerMemoryUtils.cpp	/^void * player_CreateSharedMem( size_t shmLen, key_t & shmKey)$/;"	f	typeref:typename:void *
pluginCallsign	ThunderAccessPlayer.h	/^    std::string pluginCallsign;$/;"	m	class:ThunderAccessPlayer	typeref:typename:std::string
remoteObject	ThunderAccessPlayer.h	/^    JSONRPC::LinkType<Core::JSON::IElement> *remoteObject;$/;"	m	class:ThunderAccessPlayer	typeref:typename:JSONRPC::LinkType<Core::JSON::IElement> *
removeWatermarkHandler	SecManagerThunder.cpp	/^void SecManagerThunder::removeWatermarkHandler(const JsonObject& parameters)$/;"	f	class:SecManagerThunder	typeref:typename:void
secClientSeManagerErrorLookUp	PlayerSecInterface.cpp	/^std::map<const int32_t, std::pair<const int32_t, const int32_t>> secClientSeManagerErrorLookUp =$/;"	v	typeref:typename:std::map<const int32_t,std::pair<const int32_t,const int32_t>>
securityToken	ThunderAccessPlayer.cpp	/^    std::string securityToken;$/;"	m	struct:ThunderSecurityPlayer	typeref:typename:std::string	file:
sessionIdMutex	ContentSecurityManagerSession.h	/^	mutable std::mutex sessionIdMutex;$/;"	m	class:ContentSecurityManagerSession	typeref:typename:std::mutex
setInputSummaryHash	ContentSecurityManagerSession.cpp	/^void ContentSecurityManagerSession::SessionManager::setInputSummaryHash(std::size_t inputSummary/;"	f	class:ContentSecurityManagerSession::SessionManager	typeref:typename:void
setPlaybackSpeedState	ContentSecurityManager.cpp	/^bool ContentSecurityManager::setPlaybackSpeedState(int64_t sessionId, int64_t playback_speed, in/;"	f	class:ContentSecurityManager	typeref:typename:bool
setPlaybackSpeedState	ContentSecurityManager.h	/^	bool setPlaybackSpeedState(int64_t sessionId, int64_t speed, int64_t position) override$/;"	f	class:FakeSecManager	typeref:typename:bool
setSessionInvalid	ContentSecurityManagerSession.h	/^	void setSessionInvalid(void)$/;"	f	class:ContentSecurityManagerSession	typeref:typename:void
setVideoWindowSize	ContentSecurityManager.cpp	/^bool ContentSecurityManager::setVideoWindowSize(int64_t sessionId, int64_t video_width, int64_t /;"	f	class:ContentSecurityManager	typeref:typename:bool
setVideoWindowSize	ContentSecurityManager.h	/^        bool setVideoWindowSize(int64_t sessionId, int64_t video_width, int64_t video_height) ov/;"	f	class:FakeSecManager	typeref:typename:bool
setWatermarkSessionEvent_CB	ContentSecurityManager.cpp	/^void ContentSecurityManager::setWatermarkSessionEvent_CB(const std::function<void(uint32_t, uint/;"	f	class:ContentSecurityManager	typeref:typename:void
setWindowSize	ContentSecurityManager.h	/^        virtual bool setWindowSize(int64_t sessionId, int64_t video_width, int64_t video_height)/;"	f	class:ContentSecurityManager	typeref:typename:bool
setWindowSize	SecManagerThunder.cpp	/^bool SecManagerThunder::setWindowSize(int64_t sessionId, int64_t video_width, int64_t video_heig/;"	f	class:SecManagerThunder	typeref:typename:bool
showWatermarkHandler	SecManagerThunder.cpp	/^void SecManagerThunder::showWatermarkHandler(const JsonObject& parameters)$/;"	f	class:SecManagerThunder	typeref:typename:void
statusCode	PlayerSecInterface.h	/^	int statusCode;$/;"	m	struct:PlayerSecExtendedStatus	typeref:typename:int
tokenQueried	ThunderAccessPlayer.cpp	/^    bool tokenQueried;$/;"	m	struct:ThunderSecurityPlayer	typeref:typename:bool	file:
tokenStatus	ThunderAccessPlayer.cpp	/^    int tokenStatus;$/;"	m	struct:ThunderSecurityPlayer	typeref:typename:int	file:
updateWatermarkHandler	SecManagerThunder.cpp	/^void SecManagerThunder::updateWatermarkHandler(const JsonObject& parameters)$/;"	f	class:SecManagerThunder	typeref:typename:void
watermarkSessionHandler	SecManagerThunder.cpp	/^void SecManagerThunder::watermarkSessionHandler(const JsonObject& parameters)$/;"	f	class:SecManagerThunder	typeref:typename:void
~ContentProtectionFirebolt	IFirebolt/ContentProtectionFirebolt.cpp	/^ContentProtectionFirebolt::~ContentProtectionFirebolt()$/;"	f	class:ContentProtectionFirebolt
~ContentSecurityManager	ContentSecurityManager.h	/^	~ContentSecurityManager(){};$/;"	f	class:ContentSecurityManager
~SecManagerThunder	SecManagerThunder.cpp	/^SecManagerThunder::~SecManagerThunder()$/;"	f	class:SecManagerThunder
~SessionManager	ContentSecurityManagerSession.cpp	/^ContentSecurityManagerSession::SessionManager::~SessionManager()$/;"	f	class:ContentSecurityManagerSession::SessionManager
~ThunderAccessPlayer	ThunderAccessPlayer.cpp	/^ThunderAccessPlayer::~ThunderAccessPlayer()$/;"	f	class:ThunderAccessPlayer
